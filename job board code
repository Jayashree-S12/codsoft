import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { BrowserRouter as Router, Route, Routes, useParams, Link } from 'react-router-dom';

const HomePage = () => (
  <div>
    <h1>Welcome to the Job Board</h1>
    <p>Find your dream job here!</p>
    <h2>Featured Job Listings</h2>
    {/* Add featured job cards here */}
  </div>
);

const JobListingsPage = () => {
  const [jobs, setJobs] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:5000/jobs')
      .then(response => setJobs(response.data))
      .catch(error => console.error('Error fetching job listings:', error));
  }, []);

  return (
    <div>
      <h1>Job Listings</h1>
      {jobs.map(job => (
        <div key={job._id}>
          <h2>{job.title}</h2>
          <p>{job.company}</p>
          <p>{job.location}</p>
          <Link to={`/jobs/${job._id}`}>View Details</Link>
        </div>
      ))}
    </div>
  );
};

const JobDetailPage = () => {
  const { id } = useParams();
  const [job, setJob] = useState(null);

  useEffect(() => {
    axios.get(`http://localhost:5000/jobs/${id}`)
      .then(response => setJob(response.data))
      .catch(error => console.error('Error fetching job details:', error));
  }, [id]);

  if (!job) return <div>Loading...</div>;

  return (
    <div>
      <h1>{job.title}</h1>
      <p>{job.company}</p>
      <p>{job.location}</p>
      <div>{job.description}</div>
      <div>{job.requirements}</div>
      <Link to={`/apply/${id}`}>Apply Now</Link>
    </div>
  );
};

const EmployerDashboard = () => (
  <div>
    <h1>Employer Dashboard</h1>
    <p>Manage your job postings and account information here.</p>
    {/* Add functionality for job posting and account management */}
  </div>
);

const CandidateDashboard = () => (
  <div>
    <h1>Candidate Dashboard</h1>
    <p>Manage your profile and applications here.</p>
    {/* Add functionality for profile management and job applications */}
  </div>
);

const JobApplicationPage = () => {
  const { id } = useParams();
  const [formData, setFormData] = useState({ name: '', email: '', resume: null });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFileChange = (e) => {
    setFormData({ ...formData, resume: e.target.files[0] });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const data = new FormData();
    data.append('name', formData.name);
    data.append('email', formData.email);
    data.append('resume', formData.resume);

    axios.post(`http://localhost:5000/jobs/${id}/apply`, data)
      .then(response => {
        alert('Application submitted successfully!');
      })
      .catch(error => {
        console.error('Error submitting application:', error);
      });
  };

  return (
    <div>
      <h1>Apply for Job</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Name</label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </div>
        <div>
          <label>Email</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>
        <div>
          <label>Resume</label>
          <input
            type="file"
            name="resume"
            onChange={handleFileChange}
            required
          />
        </div>
        <button type="submit">Submit Application</button>
      </form>
    </div>
  );
};

const App = () => (
  <Router>
    <Routes>
      <Route path="/" element={<HomePage />} />
      <Route path="/jobs" element={<JobListingsPage />} />
      <Route path="/jobs/:id" element={<JobDetailPage />} />
      <Route path="/employer-dashboard" element={<EmployerDashboard />} />
      <Route path="/candidate-dashboard" element={<CandidateDashboard />} />
      <Route path="/apply/:id" element={<JobApplicationPage />} />
    </Routes>
  </Router>
);

export default App;
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const Job = require('./models/job');

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/job-board', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.post('/jobs', async (req, res) => {
  const job = new Job(req.body);
  try {
    await job.save();
    res.status(201).send(job);
  } catch (e) {
    res.status(400).send(e);
  }
});

app.get('/jobs', async (req, res) => {
  try {
    const jobs = await Job.find({});
    res.send(jobs);
  } catch (e) {
    res.status(500).send(e);
  }
});

app.get('/jobs/:id', async (req, res) => {
  const _id = req.params.id;
  try {
    const job = await Job.findById(_id);
    if (!job) {
      return res.status(404).send();
    }
    res.send(job);
  } catch (e) {
    res.status(500).send(e);
  }
});

app.post('/jobs/:id/apply', async (req, res) => {
  const _id = req.params.id;
  // Handle job application here
  res.send({ message: 'Application received' });
});

app.listen(5000, () => {
  console.log('Server is running on port 5000');
});
const mongoose = require('mongoose');

const jobSchema = new mongoose.Schema({
  title: { type: String, required: true },
  company: { type: String, required: true },
  description: { type: String, required: true },
  requirements: { type: String, required: true },
  postedAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Job', jobSchema);
